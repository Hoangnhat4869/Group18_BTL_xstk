# Convert any string data that need to be in integer type.
# Lithography converting.
cpu_complete = cpu_complete %>%
mutate(Lithography = gsub("nm|\\s", "", Lithography),
Lithography = as.double(Lithography))
cpu_complete = cpu_complete %>%
mutate(Processor_Base_Frequency = ifelse(!is.na(Processor_Base_Frequency),
if_else(str_detect(Processor_Base_Frequency, "MHz"), # condition,
suppressWarnings(as.double(gsub("MHz|\\s", "", Processor_Base_Frequency))), # if true
(suppressWarnings(as.double(gsub("GHz|\\s", "", Processor_Base_Frequency))) * 1000) # else
),
NA))
# Process missing data.
cpu_complete$nb_of_Threads[is.na(cpu_complete$nb_of_Threads)] = mean(cpu_complete$nb_of_Threads, na.rm = TRUE)
cpu_complete$Lithography[is.na(cpu_complete$Lithography)] = mean(cpu_complete$Lithography, na.rm = TRUE)
# Print out the number of NA
print(apply(is.na(temp),2,sum))
print(apply(is.na(cpu_complete),2,sum))
# Processor_Base_Frequency converting (GHZ & MHZ) to MHZ.
cpu_complete = cpu_complete %>%
mutate(Processor_Base_Frequency = if_else(str_detect(Processor_Base_Frequency, "MHz"), # condition
suppressWarnings(as.double(gsub("MHz|\\s", "", Processor_Base_Frequency))), # if true
(suppressWarnings(as.double(gsub("GHz|\\s", "", Processor_Base_Frequency))) * 1000) # else
))
print(apply(is.na(cpu_complete),2,sum))
# Processor_Base_Frequency converting (GHZ & MHZ) to MHZ.
Processor_Base_Frequency = function(string) {
if (is.na(string)) {
return(NA)
}
if (str_detect(string, "MHz")) {
return(as.double(gsub("MHz|\\s", "", string)))
}
return(as.double(gsub("MHz|\\s", "", string)) * 1000)
}
# Process missing data.
cpu_complete$nb_of_Threads[is.na(cpu_complete$nb_of_Threads)] = mean(cpu_complete$nb_of_Threads, na.rm = TRUE)
cpu_complete$Lithography[is.na(cpu_complete$Lithography)] = mean(cpu_complete$Lithography, na.rm = TRUE)
# Print out the number of NA
print(apply(is.na(temp),2,sum))
print(apply(is.na(cpu_complete),2,sum))
# Reading the dataset
cpu_raw <- read.csv("Dataset/Intel_CPUs.csv")
cpu_raw <- cpu_raw %>% select("Vertical_Segment", "Lithography", "nb_of_Cores", "nb_of_Threads",
"Processor_Base_Frequency", "Cache", "Bus_Speed",
"Max_Memory_Size", "Memory_Types", "Max_nb_of_Memory_Channels",
"Max_Memory_Bandwidth"
)
# Replace all blank and other to NA
cpu_complete <- cpu_raw
cpu_complete[cpu_complete == ""] <- NA
cpu_complete[cpu_complete == "N/A"] <- NA
temp = cpu_complete
# Plot data pattern
aggr_plot <- aggr(cpu_complete, col=c('navyblue','red'),
numbers=TRUE,
sortVars=TRUE,
labels=names(cpu_complete),
cex.axis=.7,
gap=3,
ylab=c("Histogram of Missing data","Pattern"),
cex.numbers = 0.95
)
# Convert any string data that need to be in integer type.
# Lithography converting.
cpu_complete = cpu_complete %>%
mutate(Lithography = gsub("nm|\\s", "", Lithography),
Lithography = as.double(Lithography))
# Processor_Base_Frequency converting (GHZ & MHZ) to MHZ.
Processor_Base_Frequency = function(string) {
if (is.na(string)) {
return(NA)
}
if (str_detect(string, "MHz")) {
return(as.double(gsub("MHz|\\s", "", string)))
}
return(as.double(gsub("MHz|\\s", "", string)) * 1000)
}
cpu_complete$Processor_Base_Frequency = sapply(cpu_complete$Processor_Base_Frequency, Processor_Base_Frequency)
use warnings()
warnings()
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
is.na(2313)
is.na(NA)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
# Reading the dataset
cpu_raw <- read.csv("Dataset/Intel_CPUs.csv")
cpu_raw <- cpu_raw %>% select("Vertical_Segment", "Lithography", "nb_of_Cores", "nb_of_Threads",
"Processor_Base_Frequency", "Cache", "Bus_Speed",
"Max_Memory_Size", "Memory_Types", "Max_nb_of_Memory_Channels",
"Max_Memory_Bandwidth"
)
# Replace all blank and other to NA
cpu_complete <- cpu_raw
cpu_complete[cpu_complete == ""] <- NA
cpu_complete[cpu_complete == "N/A"] <- NA
temp = cpu_complete
# Plot data pattern
aggr_plot <- aggr(cpu_complete, col=c('navyblue','red'),
numbers=TRUE,
sortVars=TRUE,
labels=names(cpu_complete),
cex.axis=.7,
gap=3,
ylab=c("Histogram of Missing data","Pattern"),
cex.numbers = 0.95
)
# Convert any string data that need to be in integer type.
# Lithography converting.
cpu_complete = cpu_complete %>%
mutate(Lithography = gsub("nm|\\s", "", Lithography),
Lithography = as.double(Lithography))
cpu_complete$Processor_Base_Frequency
cpu_complete$Processor_Base_Frequency[0]
cpu_complete$Processor_Base_Frequency[1]
is.na(cpu_complete$Processor_Base_Frequency[595])
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
cpu_complete$Processor_Base_Frequency = na.omit(cpu_complete$Processor_Base_Frequency)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
# Reading the dataset
cpu_raw <- read.csv("Dataset/Intel_CPUs.csv")
cpu_raw <- cpu_raw %>% select("Vertical_Segment", "Lithography", "nb_of_Cores", "nb_of_Threads",
"Processor_Base_Frequency", "Cache", "Bus_Speed",
"Max_Memory_Size", "Memory_Types", "Max_nb_of_Memory_Channels",
"Max_Memory_Bandwidth"
)
# Replace all blank and other to NA
cpu_complete <- cpu_raw
cpu_complete[cpu_complete == ""] <- NA
cpu_complete[cpu_complete == "N/A"] <- NA
temp = cpu_complete
# Plot data pattern
aggr_plot <- aggr(cpu_complete, col=c('navyblue','red'),
numbers=TRUE,
sortVars=TRUE,
labels=names(cpu_complete),
cex.axis=.7,
gap=3,
ylab=c("Histogram of Missing data","Pattern"),
cex.numbers = 0.95
)
# Convert any string data that need to be in integer type.
# Lithography converting.
cpu_complete = cpu_complete %>%
mutate(Lithography = gsub("nm|\\s", "", Lithography),
Lithography = as.double(Lithography))
# Processor_Base_Frequency converting (GHZ & MHZ) to MHZ.
Processor_Base_Frequency_cleaning = function(string) {
if (!is.na(string)) {
if (str_detect(string, "MHz")) {
return(as.double(gsub("MHz|\\s", "", string)))
}
return(as.double(gsub("MHz|\\s", "", string)) * 1000)
}
}
cpu_complete = na.omit(cpu_complete)
print(apply(is.na(cpu_complete),2,sum))
cpu_complete$Processor_Base_Frequency = sapply(cpu_complete$Processor_Base_Frequency, Processor_Base_Frequency_cleaning)
warnings()
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
print(apply(is.na(cpu_complete),2,sum))
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
# Replace all blank and other to NA
cpu_complete <- cpu_raw
cpu_complete[cpu_complete == ""] <- NA
cpu_complete[cpu_complete == "N/A"] <- NA
temp = cpu_complete
# Plot data pattern
aggr_plot <- aggr(cpu_complete, col=c('navyblue','red'),
numbers=TRUE,
sortVars=TRUE,
labels=names(cpu_complete),
cex.axis=.7,
gap=3,
ylab=c("Histogram of Missing data","Pattern"),
cex.numbers = 0.95
)
# Convert any string data that need to be in integer type.
# Lithography converting.
cpu_complete = cpu_complete %>%
mutate(Lithography = gsub("nm|\\s", "", Lithography),
Lithography = as.double(Lithography))
# Processor_Base_Frequency converting (GHZ & MHZ) to MHZ.
if (!is.na(string)) {
if(grepl('G',size)){
return ( as.double(gsub(" GHz","",size)) * 1000 )
}
return ( as.double(gsub(" MHz","",size)) )
}
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
# Processor_Base_Frequency converting (GHZ & MHZ) to MHZ.
if (!is.na(string)) {
if(grepl('G',string)){
return ( as.double(gsub(" GHz","",string)) * 1000 )
}
return ( as.double(gsub(" MHz","",string)) )
}
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
# Reading the dataset
cpu_raw <- read.csv("Dataset/Intel_CPUs.csv")
cpu_raw <- cpu_raw %>% select("Vertical_Segment", "Lithography", "nb_of_Cores", "nb_of_Threads",
"Processor_Base_Frequency", "Cache", "Bus_Speed",
"Max_Memory_Size", "Memory_Types", "Max_nb_of_Memory_Channels",
"Max_Memory_Bandwidth"
)
# Replace all blank and other to NA
cpu_complete <- cpu_raw
cpu_complete[cpu_complete == ""] <- NA
cpu_complete[cpu_complete == "N/A"] <- NA
temp = cpu_complete
# Plot data pattern
aggr_plot <- aggr(cpu_complete, col=c('navyblue','red'),
numbers=TRUE,
sortVars=TRUE,
labels=names(cpu_complete),
cex.axis=.7,
gap=3,
ylab=c("Histogram of Missing data","Pattern"),
cex.numbers = 0.95
)
# Convert any string data that need to be in integer type.
# Lithography converting.
cpu_complete = cpu_complete %>%
mutate(Lithography = gsub("nm|\\s", "", Lithography),
Lithography = as.double(Lithography))
# Processor_Base_Frequency converting (GHZ & MHZ) to MHZ.
Processor_Base_Frequency_cleaning = function(string) {
if (!is.na(string)) {
if(grepl('G',string)){
return ( as.double(gsub("GHz|\\s","",string)) * 1000 )
}
return ( as.double(gsub("MHz|\\s","",string)) )
}
}
cpu_complete$Processor_Base_Frequency = sapply(cpu_complete$Processor_Base_Frequency, Processor_Base_Frequency_cleaning)
# Print out the number of NA
print(apply(is.na(temp),2,sum))
print(apply(is.na(cpu_complete),2,sum))
# Process missing data.
cpu_complete$nb_of_Threads[is.na(cpu_complete$nb_of_Threads)] = mean(cpu_complete$nb_of_Threads, na.rm = TRUE)
cpu_complete$Lithography[is.na(cpu_complete$Lithography)] = mean(cpu_complete$Lithography, na.rm = TRUE)
View(cpu_complete)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
View(cpu_complete)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
View(cpu_complete)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
View(cpu_complete)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
View(cpu_complete)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
View(cpu_complete)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
# Reading the dataset
cpu_raw <- read.csv("Dataset/Intel_CPUs.csv")
cpu_raw <- cpu_raw %>% select("Vertical_Segment", "Lithography", "nb_of_Cores", "nb_of_Threads",
"Processor_Base_Frequency", "Cache", "Bus_Speed",
"Max_Memory_Size", "Memory_Types", "Max_nb_of_Memory_Channels",
"Max_Memory_Bandwidth"
)
# Replace all blank and other to NA
cpu_complete <- cpu_raw
cpu_complete[cpu_complete == ""] <- NA
cpu_complete[cpu_complete == "N/A"] <- NA
temp = cpu_complete
# Plot data pattern
aggr_plot <- aggr(cpu_complete, col=c('navyblue','red'),
numbers=TRUE,
sortVars=TRUE,
labels=names(cpu_complete),
cex.axis=.7,
gap=3,
ylab=c("Histogram of Missing data","Pattern"),
cex.numbers = 0.95
)
# Convert any string data that need to be in integer type.
# Lithography converting.
cpu_complete = cpu_complete %>%
mutate(Lithography = gsub("nm|\\s", "", Lithography),
Lithography = as.double(Lithography))
# Processor_Base_Frequency converting (GHZ & MHZ) to MHZ.
Processor_Base_Frequency_cleaning = function(string) {
if (!is.na(string)) {
if(grepl("GHz",string)){
return ( as.double(gsub("GHz|\\s","",string)) * 1000 )
}
return ( as.double(gsub("MHz|\\s","",string)) )
}
return(NA)
}
cpu_complete$Processor_Base_Frequency = sapply(cpu_complete$Processor_Base_Frequency, Processor_Base_Frequency_cleaning)
# Max_Memory_Size converting (TB & GB) to GB.
Max_Memory_Size_cleaning = function(string) {
if (!is.na(string)) {
if(grepl("TB",string)){
return ( as.double(gsub("TB|\\s","",string)) * 1024 )
}
return ( as.double(gsub("GB|\\s","",string)) )
}
return(NA)
}
cpu_complete$Max_Memory_Size = sapply(cpu_complete$Max_Memory_Size, Max_Memory_Size_cleaning)
# Max_Memory_Bandwidth converting.
cpu_complete = cpu_complete %>%
mutate(Max_Memory_Bandwidth = gsub("GB/s|\\s", "", Max_Memory_Bandwidth),
Max_Memory_Bandwidth = as.double(Max_Memory_Bandwidth))
cpu_complete <- separate(cpu_complete,Cache,into = c("Cache_Size","Cache_Type"),sep=" ")
View(cpu_complete)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
View(cpu_complete)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
View(cpu_complete)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
View(cpu_complete)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
View(cpu_complete)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
View(cpu_complete)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
View(cpu_complete)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
View(cpu_complete)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
View(cpu_complete)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
View(cpu_complete)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
cpu_complete %>%
unique(Cache_size)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
cpu_complete$Cache_size
unique(cpu_complete$Cache_size)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
cpu_complete %>% union_all()
cpu_complete %>% union()
cpu_complete %>% unique()
cpu_complete %>% unique(Cache_size)
cpu_complete %>% unique(cpu_complete$Cache_size)
cpu_complete %>% select(Cache_size) %>% filter(unique(Cache_size))
cpu_complete %>% select(Cache_size)
cpu_complete %>% select(Cache_size) %>% filter(unique(.))
rlang::last_trace()
cpu_complete %>% distinct(Cache_size)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
dplyr::last_dplyr_warnings()
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
View(cpu_complete)
View(cpu_complete)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
View(cpu_complete)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
# TDP Converting
cpu_complete %>% distinct(TDP)
# TDP Converting
cpu_complete = cpu_complete %>%
mutate(TDP = as.double(gsub("W|\\s", "", TDP)))
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
View(cpu_complete)
# Temperature converting
cpu_complete %>%
distinct(T)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
cpu_complete$Cache_type[is.na(cpu_complete$Cache_type)] = "Missing" # Replacing all NA type to None type
Cache_size_cleaning = function(string) { # Cleaning function
if (!is.na(string)) {
if(grepl("KB",string)){
return ( as.double(gsub("KB","",string)) / 1024 )
}
return ( as.double(gsub("MB","",string)) )
}
return(NA)
}
cpu_complete$Cache_size = sapply(cpu_complete$Cache_size, Cache_size_cleaning) # Cleaning section
# TDP Converting
cpu_complete = cpu_complete %>%
mutate(TDP = as.double(gsub("W|\\s", "", TDP)))
# Instruction_set converting
cpu_complete %>%
distinct(Instruction_Set)
# Process missing data.
# Tat ca moi thu trong cai doan nay thi phai tinh mean theo nhom (Group by) roi moi thay vo vi tri NA.
cpu_complete$nb_of_Threads[is.na(cpu_complete$nb_of_Threads)] = mean(cpu_complete$nb_of_Threads, na.rm = TRUE)
cpu_complete$Lithography[is.na(cpu_complete$Lithography)] = mean(cpu_complete$Lithography, na.rm = TRUE)
cpu_complete$Processor_Base_Frequency[is.na(cpu_complete$Processor_Base_Frequency)] = mean(cpu_complete$Processor_Base_Frequency, na.rm = TRUE)
# Print out the number of NA
print(apply(is.na(temp),2,sum))
print(apply(is.na(cpu_complete),2,sum))
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
View(cpu_complete)
# Instruction_set converting
cpu_complete %>%
distinct(Instruction_Set)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
View(cpu_complete)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
View(cpu_complete)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
View(cpu_complete)
cpu_complete %>% distinct(Instruction_Set_type)
cpu_complete %>% distinct(Instruction_Set_value)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
View(cpu_complete)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
-
+
>
dwad
print("-")
print("\")
print("\\")
print("\\\")
print("\\s")
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
View(cpu_complete)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
View(cpu_complete)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
cpu_complete %>% mean(Instruction_Set)
mean(cpu_complete$Instruction_Set)
mean(cpu_complete$Instruction_Set, na.rm = TRUE)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
View(cpu_complete)
cpu_complete %>% distinct(Bus_Speed)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
cpu_complete %>% distinct(Bus_Speed)
cpu_complete %>% distinct(Embedded_Options_Available)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
cpu_complete %>% distinct(ECC_Memory_Supported)
cpu_complete %>% distinct(PCI_Express_Revision)
cpu_complete %>% distinct(Max_nb_of_PCI_Express_Lanes)
cpu_complete %>% distinct(Intel_Hyper_Threading_Technology_)
cpu_complete %>% distinct(Intel_Virtualization_Technology_VTx_)
cpu_complete %>% distinct(Intel_64_)
# Print out the number of NA
print(apply(is.na(temp),2,sum))
print(apply(is.na(cpu_complete),2,sum))
cpu_complete %>% distinct(Idle_States)
cpu_complete %>% distinct(Thermal_Monitoring_Technologies)
cpu_complete %>% distinct(Secure_Key)
cpu_complete %>% distinct(Execute_Disable_Bit)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
cpu_complete %>% distinct(Cache_size)
cpu_complete %>% distinct(Cache_type)
cpu_complete %>% distinct(Lithography)
cpu_complete %>% distinct(Processor_Base_Frequency)
cpu_complete %>% distinct(Max_Memory_Size)
cpu_complete %>% distinct(Max_Memory_Bandwidth)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
View(cpu_complete)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
# Remove any unnecessary data,...
remove("Cache_size_cleaning")
View(aggr_plot)
source("E:/Tai lieu dh/Xac suat thong ke/BTL/source/main.R", echo=TRUE)
View(cpu_raw)
